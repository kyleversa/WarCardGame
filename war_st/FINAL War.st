'From Pharo11.0.0 of 25 September 2023 [Build information: Pharo-11.0.0+build.707.sha.f720787cab0b25f0a8a811d66f2a8d3633ad8ba3 (64 Bit)] on 23 October 2023 at 6:43:27.685828 pm'!Object subclass: #War	instanceVariableNames: ''	classVariableNames: ''	package: 'CCPS506'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!War class	instanceVariableNames: ''!!War class methodsFor: 'calculating' stamp: 'KylePurves 10/23/2023 18:43'!deal: deck	| player1 player2 cursor reversedDeck |	"Initializes piles for each player"	player1 := OrderedCollection new.	player2 := OrderedCollection new.	cursor := 1.	"Reverses the deck to simulate popping from the end"	reversedDeck := deck reversed.	[ cursor + 1 <= reversedDeck size ] whileTrue: [		| card1 card2 |		card1 := reversedDeck at: cursor.		cursor := cursor + 1.		card2 := reversedDeck at: cursor.		cursor := cursor + 1.		"Converts Ace (1) to 14"		card1 = 1 ifTrue: [ card1 := 14 ].		card2 = 1 ifTrue: [ card2 := 14 ].		player1 add: card1.		player2 add: card2 	].	[ player1 isNotEmpty and: [ player2 isNotEmpty ] ] whileTrue: [		| card1 card2 warCards faceDown1 faceDown2 |		card1 := player1 removeFirst.		card2 := player2 removeFirst.		warCards := OrderedCollection new.		"Compares the ranks of the cards"		(card1 = card2) ifTrue: [				warCards addAll: { card1. card2 }.				"Checks if cards are equal and if player1 or player2 are not empty(lost the game)"				[	card1 = card2 and: [ player1 isNotEmpty and: [ player2 isNotEmpty ] ] ] whileTrue: [					faceDown1 := player1 removeFirst.					faceDown2 := player2 removeFirst.					(player1 isEmpty) ifTrue: [						warCards addAll: { faceDown1. faceDown2 }.						warCards := warCards copy sort: [ :a :b | a > b ].						player2 addAll: warCards.												"Replaces 14 with 1"						player2 := player2 collect: [ :x | x = 14 ifTrue: [ 1 ] ifFalse: [ x ] ]. 						^ player2 asArray 					].										(player2 isEmpty) ifTrue: [						warCards addAll: { faceDown1. faceDown2 }.						warCards := warCards copy sort: [ :a :b | a > b ].						player1 addAll: warCards.												"Replace 14 with 1"						player1 := player1 collect: [ :x | x = 14 ifTrue: [ 1 ] ifFalse: [ x ] ]. 						^ player1 asArray 					].										card1 := player1 removeFirst.					card2 := player2 removeFirst.					warCards := warCards , { faceDown1. card1. faceDown2. card2 }.					warCards := warCards copy sort: [ :a :b | a > b ] 				].				card1 > card2 ifTrue: [ 					player1 addAll: warCards 				].				card2 > card1 ifTrue: [ 					player2 addAll: warCards 				].							"Checks if one player is done and the cards are equal"				(card1 = card2 and: player1 isEmpty) ifTrue: [					player2 addAll: warCards 				].				(card1 = card2 and: player2 isEmpty) ifTrue: [					player1 addAll: warCards 				] 			]			ifFalse: [				card1 > card2 					ifTrue: [						player1 addAll: ({ card1. card2 } copy sort: [ :a :b | a > b ]) 					]					ifFalse: [						player2 addAll: ({ card1. card2 } copy sort: [ :a :b | a > b ]) 					].				]. 			].	"Returns the pile of the winning player"	reversedDeck := (player1 isEmpty ifTrue: [ player2 ] ifFalse: [ player1 ]) collect: [ :x | x = 14 ifTrue: [ 1 ] ifFalse: [ x ] ].	^ reversedDeck asArray! !